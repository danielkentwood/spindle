# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (8)
# #########################################################################

class CharacterSpan(BaseModel):
    text: str
    start: typing.Optional[int] = None
    end: typing.Optional[int] = None

class EntityType(BaseModel):
    name: str
    description: str

class ExtractionResult(BaseModel):
    triples: typing.List["Triple"]
    reasoning: str

class Ontology(BaseModel):
    entity_types: typing.List["EntityType"]
    relation_types: typing.List["RelationType"]

class RelationType(BaseModel):
    name: str
    description: str
    domain: str
    range: str

class Resume(BaseModel):
    name: str
    email: str
    experience: typing.List[str]
    skills: typing.List[str]

class SourceMetadata(BaseModel):
    source_name: str
    source_url: typing.Optional[str] = None

class Triple(BaseModel):
    subject: str
    predicate: str
    object: str
    source: "SourceMetadata"
    supporting_spans: typing.List["CharacterSpan"]
    extraction_datetime: typing.Optional[str] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################
